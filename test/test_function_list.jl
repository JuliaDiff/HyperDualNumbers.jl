
#=
Below I test a bunch of random functions based on expressions.
The expressions of the 1st and 2nd derivatives,
which are collected in the `list_of_test_functions` array,
were copied from the output generated by running the sagemath code below.
To reproduce the list, just copy the following code in a file `foo.sage`
and then run `load("foo.sage")` in sagemath.
A last step is required to transform al `e^x` into `exp(x)`.
In vim, this is done via the command `:%s/e\^x/exp(x)/c`.
(Make sure you don't change the `e^x` in these comments though!)
Note I reproduced the functions tested in `test_power.jl`

var('x')
def myprint(f): print("    ( :({}), :({}), :({}) )".format(f(x), derivative(f(x), x, 1), derivative(f(x), x, 2)))
f(x) = sin(x)^cos(x) ; myprint(f)
f(x) = (x^3 + exp(x))/(log(x^2 + 1) + 1) ; myprint(f)
f(x) = (tan(x)/(cos(x) + x^2 + 1))^(x^3+1) ; myprint(f)
f(x) = 1/(cos(x)^1.2) ; myprint(f)
f(x) = x - x^3 + 4*x^2 ; myprint(f)
f(x) = x^2 - x ; myprint(f)
f(x) = (x - x^3 + 4*x^2)^(x^2 - x) ; myprint(f)
f(x) = -4*x^2 + 18 ; myprint(f)
f(x) = x^3 - 7 ; myprint(f)
f(x) = (-4*x^2 + 18)^(x^3 - 7) ; myprint(f)
=#

list_of_test_functions = [
    ( :(sin(x)^cos(x)), :(-(log(sin(x))*sin(x) - cos(x)^2/sin(x))*sin(x)^cos(x)), :((log(sin(x))*sin(x) - cos(x)^2/sin(x))^2*sin(x)^cos(x) - (cos(x)*log(sin(x)) + cos(x)^3/sin(x)^2 + 3*cos(x))*sin(x)^cos(x)) )
    ( :((x^3 + exp(x))/(log(x^2 + 1) + 1)), :((3*x^2 + exp(x))/(log(x^2 + 1) + 1) - 2*(x^3 + exp(x))*x/((x^2 + 1)*(log(x^2 + 1) + 1)^2)), :((6*x + exp(x))/(log(x^2 + 1) + 1) - 4*(3*x^2 + exp(x))*x/((x^2 + 1)*(log(x^2 + 1) + 1)^2) + 4*(x^3 + exp(x))*x^2/((x^2 + 1)^2*(log(x^2 + 1) + 1)^2) + 8*(x^3 + exp(x))*x^2/((x^2 + 1)^2*(log(x^2 + 1) + 1)^3) - 2*(x^3 + exp(x))/((x^2 + 1)*(log(x^2 + 1) + 1)^2)) )
    ( :((tan(x)/(x^2 + cos(x) + 1))^(x^3 + 1)), :((3*x^2*log(tan(x)/(x^2 + cos(x) + 1)) + (x^3 + 1)*(x^2 + cos(x) + 1)*((tan(x)^2 + 1)/(x^2 + cos(x) + 1) - (2*x - sin(x))*tan(x)/(x^2 + cos(x) + 1)^2)/tan(x))*(tan(x)/(x^2 + cos(x) + 1))^(x^3 + 1)), :((3*x^2*log(tan(x)/(x^2 + cos(x) + 1)) + (x^3 + 1)*(x^2 + cos(x) + 1)*((tan(x)^2 + 1)/(x^2 + cos(x) + 1) - (2*x - sin(x))*tan(x)/(x^2 + cos(x) + 1)^2)/tan(x))^2*(tan(x)/(x^2 + cos(x) + 1))^(x^3 + 1) + (6*(x^2 + cos(x) + 1)*x^2*((tan(x)^2 + 1)/(x^2 + cos(x) + 1) - (2*x - sin(x))*tan(x)/(x^2 + cos(x) + 1)^2)/tan(x) + 6*x*log(tan(x)/(x^2 + cos(x) + 1)) - (x^3 + 1)*(x^2 + cos(x) + 1)*(tan(x)^2 + 1)*((tan(x)^2 + 1)/(x^2 + cos(x) + 1) - (2*x - sin(x))*tan(x)/(x^2 + cos(x) + 1)^2)/tan(x)^2 + (x^3 + 1)*(x^2 + cos(x) + 1)*(2*(tan(x)^2 + 1)*tan(x)/(x^2 + cos(x) + 1) - 2*(tan(x)^2 + 1)*(2*x - sin(x))/(x^2 + cos(x) + 1)^2 + 2*(2*x - sin(x))^2*tan(x)/(x^2 + cos(x) + 1)^3 + (cos(x) - 2)*tan(x)/(x^2 + cos(x) + 1)^2)/tan(x) + (x^3 + 1)*(2*x - sin(x))*((tan(x)^2 + 1)/(x^2 + cos(x) + 1) - (2*x - sin(x))*tan(x)/(x^2 + cos(x) + 1)^2)/tan(x))*(tan(x)/(x^2 + cos(x) + 1))^(x^3 + 1)) )
    ( :(cos(x)^(-1.20000000000000)), :(1.20000000000000*sin(x)/cos(x)^2.20000000000000), :(1.20000000000000/cos(x)^1.20000000000000 + 2.64000000000000*sin(x)^2/cos(x)^3.20000000000000) )
    ( :(-x^3 + 4*x^2 + x), :(-3*x^2 + 8*x + 1), :(-6*x + 8) )
    ( :(x^2 - x), :(2*x - 1), :(2) )
    ( :((-x^3 + 4*x^2 + x)^(x^2 - x)), :(((2*x - 1)*log(-x^3 + 4*x^2 + x) + (3*x^2 - 8*x - 1)*(x^2 - x)/(x^3 - 4*x^2 - x))*(-x^3 + 4*x^2 + x)^(x^2 - x)), :(((2*x - 1)*log(-x^3 + 4*x^2 + x) + (3*x^2 - 8*x - 1)*(x^2 - x)/(x^3 - 4*x^2 - x))^2*(-x^3 + 4*x^2 + x)^(x^2 - x) - (-x^3 + 4*x^2 + x)^(x^2 - x)*((3*x^2 - 8*x - 1)^2*(x^2 - x)/(x^3 - 4*x^2 - x)^2 - 2*(x^2 - x)*(3*x - 4)/(x^3 - 4*x^2 - x) - 2*(3*x^2 - 8*x - 1)*(2*x - 1)/(x^3 - 4*x^2 - x) - 2*log(-x^3 + 4*x^2 + x))) )
    ( :(-4*x^2 + 18), :(-8*x), :(-8) )
    ( :(x^3 - 7), :(3*x^2), :(6*x) )
    ( :((-4*x^2 + 18)^(x^3 - 7)), :((3*x^2*log(-4*x^2 + 18) + 4*(x^3 - 7)*x/(2*x^2 - 9))*(-4*x^2 + 18)^(x^3 - 7)), :((3*x^2*log(-4*x^2 + 18) + 4*(x^3 - 7)*x/(2*x^2 - 9))^2*(-4*x^2 + 18)^(x^3 - 7) + 2*(12*x^3/(2*x^2 - 9) + 3*x*log(-4*x^2 + 18) - 8*(x^3 - 7)*x^2/(2*x^2 - 9)^2 + 2*(x^3 - 7)/(2*x^2 - 9))*(-4*x^2 + 18)^(x^3 - 7)) )
    ( :(exp10(x)), :(log(10)*exp10(x)), :(log(10)^2*exp10(x)) )
]

# some non-random and random x values to test
x_values = -2.5:0.1:2.5

# list of functions with their 1st and 2nd derivatives
@testset "Test $fexp" for (fexp, Dfexp, D²fexp) in list_of_test_functions
    @eval f(x) = $fexp
    @eval Df(x) = $Dfexp
    @eval D²f(x) = $D²fexp
    @testset "for x = $x0" for x0 in x_values
        try # Necessary to avoid cases where the functions are not defined (e.g., (-1)^0.5)
            f(x0), Df(x0), D²f(x0)
        catch
            continue
        end
        (isnan(f(x0)) || isnan(Df(x0)) || isnan(D²f(x0))) && continue
        t0 = hyper(x0, 1, 1, 0)
        @test realpart(f(t0)) ≈ f(x0) rtol = 1e4eps()
        @test ε₁part(f(t0)) ≈ Df(x0) rtol = 1e4eps()
        @test ε₂part(f(t0)) ≈ Df(x0) rtol = 1e4eps()
        @test ε₁ε₂part(f(t0)) ≈ D²f(x0) rtol = 1e4eps()
    end
end

